definitions:
  model.Login:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: PaSsWoRd
        type: string
    type: object
  model.Registration:
    properties:
      confirm:
        example: PaSsWoRd
        type: string
      email:
        example: user@example.com
        type: string
      name:
        example: Username
        type: string
      password:
        example: PaSsWoRd
        type: string
    type: object
  model.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      role:
        type: integer
      updated_at:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/test:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - JWT: []
      summary: api test
      tags:
      - test
  /api/v1/users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - JWT: []
      summary: get all users
      tags:
      - user
  /api/v1/users/{id}:
    get:
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - JWT: []
      summary: user sign up
      tags:
      - user
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: login data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: user login
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      parameters:
      - description: registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.Registration'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "422":
          description: Unprocessable Entity
          schema:
            type: string
      summary: user sign up
      tags:
      - auth
securityDefinitions:
  JWT:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
